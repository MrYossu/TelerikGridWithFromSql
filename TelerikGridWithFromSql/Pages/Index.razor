@page "/"
@using TelerikGridWithFromSql.Helpers
@using Microsoft.EntityFrameworkCore
@using TelerikGridWithFromSql.Data
@inject IDbContextFactory<AppDbContext> ContextFactory

<PageTitle>Telerik grid with EF Core FromSql</PageTitle>

<h1><span class="oi oi-pulse"></span> Telerik grid with EF Core FromSql</h1>

<TelerikGrid TItem="@Product"
             OnRead="@LoadData"
             ScrollMode="@GridScrollMode.Virtual"
             FilterMode="@GridFilterMode.FilterRow"
             Height="400px"
             RowHeight="40"
             Sortable="true"
             PageSize="15"
             FilterRowDebounceDelay="350">
  <GridColumns>
    <GridColumn Field="@nameof(Product.ProductName)" />
    <GridColumn Field="@nameof(Product.UnitPrice)" />
    <GridColumn Field="@nameof(Product.UnitsInStock)" />
  </GridColumns>
</TelerikGrid>

<h3 class="mt-3">Matching products: @MatchingRows</h3>
<h3>Total value of stock: @TotalValue.ToString("C2")</h3>

@code {
  private AppDbContext _context = null!;

  private int MatchingRows { get; set; }
  private decimal TotalValue { get; set; }

  protected override async Task OnInitializedAsync() =>
    _context = await ContextFactory.CreateDbContextAsync();

  private async Task LoadData(GridReadEventArgs args) {
    TelerikGridFilterResults<Product> data = await args.GetData<Product>(_context, "Products", "ProductName");
    MatchingRows = data.MatchingRows;
    // Note that the SqlQueryRaw method will throw an exception if the query does not return any results, which is why we check if there was any data before calling SqlQueryRaw...
    TotalValue = MatchingRows == 0 
      ? 0 
      : await _context.Database.SqlQueryRaw<decimal>($"select sum(UnitsInStock * UnitPrice) as Value from products{data.SqlFilters}", data.Parameters).FirstAsync();
  }

}