@page "/"
@using TelerikGridWithFromSql.Helpers
@using Microsoft.EntityFrameworkCore
@using TelerikGridWithFromSql.Data
@using Microsoft.Data.SqlClient
@inject IDbContextFactory<AppDbContext> ContextFactory

<PageTitle>Telerik grid with EF Core FromSql</PageTitle>

<h1><span class="oi oi-pulse"></span> Telerik grid with EF Core FromSql</h1>

<TelerikGrid TItem="@Product"
             OnRead="@LoadData"
             ScrollMode="@GridScrollMode.Virtual"
             FilterMode="@GridFilterMode.FilterRow"
             Height="400px"
             RowHeight="40"
             Sortable="true"
             PageSize="15"
             FilterRowDebounceDelay="350">
  <GridColumns>
    <GridColumn Field="@nameof(Product.ProductName)" />
    <GridColumn Field="@nameof(Product.UnitPrice)" />
    <GridColumn Field="@nameof(Product.UnitsInStock)" />
  </GridColumns>
</TelerikGrid>

<h3 class="mt-3">Matching products: @MatchingRows</h3>
<h3>Total value of stock: @TotalValue.ToString("C2")</h3>

@code {
  private AppDbContext _context = null!;

  private int MatchingRows { get; set; }
  private decimal TotalValue { get; set; }

  protected override async Task OnInitializedAsync() =>
    _context = await ContextFactory.CreateDbContextAsync();

  private async Task LoadData(GridReadEventArgs args) {
    (MatchingRows, string sqlFilters, List<SqlParameter> values) = await args.GetData<Product>(_context, "Products", "ProductName");
    TotalValue = await _context.Database.SqlQueryRaw<decimal>($"select sum(unitsinstock * unitprice) as Value from products{sqlFilters}", values.ToArray()).FirstAsync();
  }

}